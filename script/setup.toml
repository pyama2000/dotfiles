extend = [
  { path = "tasks/alacritty.toml" },
  { path = "tasks/fish.toml" },
  { path = "tasks/font.toml" },
  { path = "tasks/git.toml" },
  { path = "tasks/language.toml" },
  { path = "tasks/starship.toml" },
  { path = "tasks/tmux.toml" },
  { path = "tasks/tool.toml" },
]

[env]
GIT_NAME       = "pyama2000"
GIT_EMAIL      = "8256tako@gmail.com"
PYTHON_VERSION = "3.9.0"
GO_VERSION     = "1.14.2"
NODE_VERSION   = "12.16.3"

##############################
# CI                         #
##############################
[tasks.github-actions]
dependencies = [
  "check_envs",
  "install_git",
  "link_git",
  "dotfiles",
  "alacritty",
  "tmux",
  "fish",
  "starship",
  "languages",
  "install_tools",
  "neovim",
  "vim",
  "install_docker_for_ubuntu",
  "finalize",
]

##############################
# Setup                      #
##############################
[tasks.setup]
dependencies = [
  "check_envs",
  "git",
  "dotfiles",
  "font",
  "alacritty",
  "tmux",
  "fish",
  "starship",
  "languages",
  "install_tools",
  "neovim",
  "vim",
  "install_docker_for_ubuntu",
  "finalize",
]

##############################
# Check envs                 #
##############################
[tasks.check_envs]
script = [
'''
#!/usr/bin/env bash

if test -z "$PYTHON_VERSION"; then
  echo "Set PYTHON_VERSION"
  exit 1
fi

if test -z "$GO_VERSION"; then
  echo "Set GO_VERSION"
  exit 1
fi

if test -z "$NODE_VERSION"; then
  echo "Set NODE_VERSION"
  exit 1
fi

if test -z "$GIT_NAME"; then
  echo "Set GIT_NAME"
  exit 1
fi

if test -z "$GIT_EMAIL"; then
  echo "Set GIT_EMAIL"
  exit 1
fi
'''
]

##############################
# dotfiles                   #
##############################
[tasks.dotfiles]
script = [
'''
#!/usr/bin/env bash

if [ ! -d "~/dotfiles" ] ; then
  git clone https://github.com/pyama2000/dotfiles.git ~/dotfiles
fi

cd ~/dotfiles
git remote set-url origin git@github.com:pyama2000/dotfiles.git
'''
]

##############################
# Neovim                     #
##############################
[tasks.neovim]
dependencies = ["install_neovim", "provider", "dein", "neovim_link"]

[tasks.install_neovim.mac]
script = [
'''
#!/usr/bin/env bash

if !(type brew > /dev/null 2>&1); then
    source ~/.profile
fi

brew install neovim
'''
]

[tasks.provider]
script = [
'''
#!/usr/bin/env bash

pip install pynvim
'''
]

[tasks.dein]
script = [
'''
#!/usr/bin/env bash

curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > ~/installer.sh
sh ~/installer.sh ~/.cache/dein
rm ~/installer.sh
'''
]

[tasks.neovim_link]
script = [
'''
#!/usr/bin/env bash

if [ ! -d "~/.config/coc/extensions" ] ; then
    mkdir -p ~/.config/coc/extensions
fi

ln -snfv ~/dotfiles/.config/nvim ~/.config
ln -snfv ~/dotfiles/.config/coc/extensions/package.json ~/.config/coc/extensions
'''
]

##############################
# Vim                        #
##############################
[tasks.vim]
dependencies = ["vim_link"]

[tasks.vim_link]
script = [
'''
#!/usr/bin/env bash

ln -snfv ~/dotfiles/.vimrc ~
'''
]

##############################
# Docker                     #
##############################
[tasks.install_docker_for_ubuntu]
dependencies = [
    "docker_for_ubuntu",
    "docker_without_root",
    "docker-compose",
]

[tasks.install_docker_for_debian]
dependencies = [
    "docker_for_debian",
    "docker_without_root",
    "docker-compose",
]

[tasks.docker_for_ubuntu.linux]
script = [
'''
#!/usr/bin/env bash

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

sudo apt update -y
sudo apt install -y docker-ce docker-ce-cli containerd.io
'''
]
dependencies = ["docker_dependencies"]

[tasks.docker_for_debian.linux]
script = [
'''
#!/usr/bin/env bash

curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/debian \
   $(lsb_release -cs) \
   stable"

sudo apt update -y
sudo apt install -y docker-ce docker-ce-cli containerd.io
'''
]
dependencies = ["docker_dependencies"]

[tasks.docker_dependencies.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt install -y apt-transport-https ca-certificates \
  curl gnupg2 software-properties-common
'''
]

[tasks.docker_without_root.linux]
script = [
'''
#!/usr/bin/env bash

sudo groupadd docker
sudo usermod -aG docker $USER
'''
]

[tasks.docker-compose.linux]
script = [
'''
#!/usr/bin/env bash

sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
'''
]

##############################
# Finalize                   #
##############################
[tasks.finalize]
dependencies = ["link_bash", "apt_autoremove"]

[tasks.link_bash]
script = [
'''
#!/usr/bin/env bash

mv ~/.profile ~/.profile.bk
ln -snfv ~/dotfiles/.profile ~
'''
]

[tasks.apt_autoremove.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt autoremove -y
'''
]
